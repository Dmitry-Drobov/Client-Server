Client_Server

1) Прочиать про клиент-серверную архитектуру

Клиент – локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных или выполнения определенной группы системных действий.
Сервер – очень мощный компьютер или специальное системное оборудование, которое предназначается для разрешения определенного круга задач по процессу выполнения программных кодов. Он выполняет работы сервисного обслуживания по клиентским запросам, предоставляет пользователям доступ к определенным системным ресурсам, сохраняет данные или БД.

Параметры, которые могут реализоваться на стороне сервера:

    Хранение, защита и доступ к данным;
    Работа с поступающими клиентскими запросами;
    Процесс отправки ответа клиенту.

Параметры, которые могут реализоваться на стороне клиента:

    Площадка по предоставлению пользовательского графического интерфейса;
    Формулировка запроса к серверу и его последующая отправка;
    Получение итогов запроса и отправка дополнительной группы команд (запросы на добавление, обновление информации, удаление группы данных).

Клиент - сервер
Клиент - сервер - база данных
Запрос - ответ

Клиент – это браузер, но встречаются и исключения (в тех случаях, когда один веб-сервер (ВС1) выполняет запрос к другому (ВС2), роль клиента играет веб-сервер ВС1). В классической ситуации (когда роль клиента выполняет браузер) для того, чтобы пользователь увидел графический интерфейс приложения в окне браузера, последний должен обработать полученный ответ веб-сервера, в котором будет содержаться информация, реализованная с применением HTML, CSS, JS (самые используемые технологии). Именно эти технологии «дают понять» браузеру, как именно необходимо «отрисовать» все, что он получил в ответе.

Веб-сервер – это сервер, принимающий HTTP-запросы от клиентов и выдающий им HTTP-ответы. Веб-сервером называют как программное обеспечение, выполняющее функции веб-сервера, так и непосредственно компьютер, на котором это программное обеспечение работает. Наиболее распространенными видами ПО веб-серверов являются Apache, IIS и NGINX. На веб-сервере функционирует тестируемое приложение, которое может быть реализовано с применением самых разнообразных языков программирования: PHP, Python, Ruby, Java, Perl и пр.

Двухзвенная архитектура
Трехзвенная архитектура
Многозвенная архитектура

2) Что ткое HTTP и HTTPS

HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — протокол прикладного уровня передачи данных, изначально — в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных. 
HTTPS (аббр. от англ. HyperText Transfer Protocol Secure) — расширение протокола HTTP для поддержки шифрования в целях повышения безопасности. Данные в протоколе HTTPS передаются поверх криптографических протоколов TLS или устаревшего в 2015 году SSL. В отличие от HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443. 

HTTP — это протокол, в котором описаны правила передачи данных в интернете. Он помогает браузеру загружать веб-страницы, а серверу — получить информацию, которую пользователь ввёл на сайте.
HTTPS — это тот же протокол, но с надстройкой безопасности.
По HTTP информация передаётся в обычном виде, а по HTTPS — в зашифрованном.

3) HTTP методы

Метод HTTP (англ. HTTP Method) — последовательность из любых символов, кроме управляющих и разделителей, указывающая на основную операцию над ресурсом.

GET Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса. 

POST Применяется для передачи пользовательских данных заданному ресурсу. В отличие от метода GET, метод POST не считается идемпотентным, то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться очередная копия этого комментария). 

PUT Применяется для загрузки содержимого запроса на указанный в запросе URI. Если по заданному URI не существует ресурса, то сервер создаёт его и возвращает статус 201 (Created). Если же ресурс был изменён, то сервер возвращает 200 (Ok) или 204 (No Content). Фундаментальное различие методов POST и PUT заключается в понимании предназначений URI ресурсов. Метод POST предполагает, что по указанному URI будет производиться обработка передаваемого клиентом содержимого. Используя PUT, клиент предполагает, что загружаемое содержимое соответствует находящемуся по данному URI ресурсу. 

DELETE Удаляет указанный ресурс.

OPTIONS Используется для определения возможностей веб-сервера или параметров соединения для конкретного ресурса. В ответ серверу следует включить заголовок Allow со списком поддерживаемых методов. Также в заголовке ответа может включаться информация о поддерживаемых расширениях. 

HEAD Аналогичен методу GET, за исключением того, что в ответе сервера отсутствует тело.

PATCH Аналогично PUT, но применяется только к фрагменту ресурса. 

TRACE Возвращает полученный запрос так, что клиент может увидеть, какую информацию промежуточные серверы добавляют или изменяют в запросе. 

CONNECT Преобразует соединение запроса в прозрачный TCP/IP-туннель, обычно чтобы содействовать установлению защищённого SSL-соединения через нешифрованный прокси. 

4) HTTP статус коды сервера

1xx - информационные
100 - continue
101 - switching protocol
102 - processing
...
2xx - подтверждение и принятие (успешные)
200 - ОК
201 - успешно POST
202 - запрос принят
...
3xx - перенаправление
300 - ресурс обнаружен в нескольких местах (несколько вариантов)
301 - ресурс удален навсегда (окончательно перенесен)
302 - ресурс временно удален (временно доступен по другому адресу)
...
4xx - ошибки на стороне клиента
400 - плохой запрос от клиента
401 - неавторизованный запрос
403 - доступ запрещен
404 - ресурс не найден
...
5xx - ошибки на стороне сервера
500 - внутренняя ошибка сервера
501 - метод не выполнен
502 - перегрузка или неиспраный шлюз
...

5) Что такое ядро браузера 

Браузер = оболочка + ядро
Среди них относительно больше типов оболочек и меньше ядер. Оболочка относится к оболочке браузера: например, меню, панели инструментов и т. д. Он в основном предназначен для работы с пользовательским интерфейсом, настройки параметров и так далее. Он вызывает ядро ??для реализации различных функций. 
Ядро - это программа или модуль, который отображает контент на основе языка разметки.
Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. Д.), организацию информации (например, добавление CSS и т. д.), и расчет режима отображения веб-страницы, а затем вывод ее на монитор или принтер.
Механизм рендеринга определяет, как браузер отображает содержимое веб-страницы и информацию о формате страницы. Разные ядра браузеров по-разному интерпретируют синтаксис записи веб-страниц, поэтому эффект рендеринга (отображения) одной и той же веб-страницы в браузерах разных ядер также может быть различным. Именно поэтому авторам веб-страниц необходимо тестировать веб-страницы в браузерах разных ядер.

Браузерный движок (англ. layout engine) — представляет собой программу, преобразующую содержимое веб-страниц (файлы HTML, XML, цифровые изображения и т. д.) и информацию о форматировании (в форматах CSS, XSL и т. д.) в интерактивное изображение форматированного содержимого на экране. Браузерный движок обычно используется в веб-браузерах (отсюда название), почтовых клиентах и других программах, нуждающихся в отображении и редактировании содержимого веб-страниц. 

6) Какие браузеры какиие ядра используют

Trident (ядро IE)

Gecko (ядро Firefox)
Общие браузеры с ядром Gecko: [1] Mozilla Firefox, Mozilla SeaMonkey, waterfox (64-разрядная версия Firefox с открытым исходным кодом), Iceweasel, Epiphany (ранняя версия), Flock (ранняя версия), K-Meleon

Presto (pre-Opera kernel) (устарело): ядро, используемое в Opera 12.17 и более ранних версиях, прекратило разработку и теперь устарело.

Webkit (ядро Safari, прототип ядра Chrome, открытый исходный код): это собственное ядро ??Apple и ядро, используемое браузером Safari от Apple.
Основные браузеры WebKit: браузер Maxthon 3, [1] Apple Safari (Win / Mac / iPhone / iPad), мобильный браузер Symbian, браузер Android по умолчанию...

Blink - это механизм верстки браузера, разработанный Google и Opera Software. Google планирует использовать этот механизм рендеринга в рамках проекта Chromium, и анонсировал эту новость в апреле 2013 года. , Этот движок рендеринга является ветвью компонента WebCore движка с открытым исходным кодом WebKit и используется в браузерах Chrome (28 и более поздние версии), Opera (15 и более поздние версии) и Яндекса.

Разработка прекращена:

    Trident — проприетарный движок Microsoft Internet Explorer.
    EdgeHTML — движок от компании Microsoft для её браузера Microsoft Edge. Является ответвлением Trident.

6 декабря 2018 года объявлено об отказе MS от Trident/EdgeHTML в пользу Blink.

    Presto — проприетарный движок, разработанный Opera Software. 13 февраля 2013 года было объявлено об отказе Opera от Presto в пользу Blink.

Поддерживаемые:

    Blink — движок браузера Chromium, браузера Google Chrome с 28 версии, Microsoft Edge с 79 версии, Opera c 15 версии и Vivaldi. Он является ответвлением WebKit.
    Gecko — открытый движок проекта Mozilla; используется в большом числе программ, основанных на коде Mozilla (браузере Firefox, почтовом клиенте Thunderbird, наборе программ SeaMonkey).
    WebKit — движок для браузера Apple Safari, включенного в операционную систему Mac OS X, и браузера Google Chrome (до 2013 года). Встроен в библиотеку Qt (Начиная с Qt 5.6 признан устаревшим).
    KHTML — разработан в рамках проекта KDE, используется в браузере Konqueror и послужил основой для WebKit.

7) Что такое API

API (Application Programming Interface — «программный интерфейс приложения») — описание способов (набор классов, процедур, функций, структур или констант), которыми одна компьютерная программа может взаимодействовать с другой программой. Обычно входит в описание какого-либо интернет-протокола (например, SCIM), программного каркаса (фреймворка) или стандарта вызовов функций операционной системы. Часто реализуется отдельной программной библиотекой или сервисом операционной системы. Используется программистами при написании всевозможных приложений.

Проще говоря, это набор компонентов, с помощью которых компьютерная программа (бот или же сайт) может взаимодействовать с другой программой (API). 

Практически все операционные системы (UNIX, Windows, OS X, Linux и т. д.) имеют API, с помощью которого программисты могут создавать приложения для этой операционной системы. Главный API операционных систем — это множество системных вызовов. 

Web API
Используется в веб-разработке — содержит, как правило, определённый набор HTTP-запросов, а также определение структуры HTTP-ответов, для выражения которых используют XML? или JSON?формат. 

8. Что такое ендпоинты

Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения.
Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые приложение использует для связи со сторонними службами и своими пользователями. 

9) URL (URI, URL, URN)

URL — это роут, который может обрабатывать разные методы запроса. Каждый тип запроса — это отдельный эндпоинт.
При формировании конкретного запроса к нему могут добавляться разные параметры. Комбинация этих параметров и URL представляет URI — Uniform Resource Identifier (унифицированный идентификатор ресурса), который указывает, где и как найти ресурс.
URN (Uniform Resource Name) — единообразное название (имя) ресурса.
URN — это постоянная последовательность символов, идентифицирующая абстрактный или физический ресурс. URN является частью концепции URI (Uniform Resource Identifier) — единообразных идентификаторов ресурса. Имена URN призваны в будущем заменить локаторы URL (Uniform Resource Locator) — единообразные определители местонахождения ресурсов. Но имена URN, в отличие от URL, не включают в себя указания на местонахождение и способ обращения к ресурсу. Стандарт URN специально разработан так, чтобы он мог включать в себя другие пространства имён. 

10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций. 
Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются идемпотентными.

11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only). Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или DELETE.

12) Иденфикация, Аутентификация, Авторизация

Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.

Пример:

Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация.
После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, раз пароль совпал, — это аутентификация.
Скорее всего, Google дополнительно спросит еще и одноразовый код из SMS или приложения. Если пользователь и его правильно введет, то система окончательно согласится с тем, что он настоящий владелец аккаунта, — это двухфакторная аутентификация.
После этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.

13) Что такое IP

Internet Protocol (IP, досл. «межсетевой протокол») — маршрутизируемый протокол сетевого уровня стека TCP/IP. Именно IP стал тем протоколом, который объединил отдельные компьютерные сети во всемирную сеть Интернет. Неотъемлемой частью протокола является адресация сети (см. IP-адрес). 

Версия IPv4
Версия IPv6

В современной сети Интернет используется IP четвёртой версии, также известный как IPv4. В протоколе IP этой версии каждому узлу сети ставится в соответствие IP-адрес длиной 4 октета (4 байта). 
С 1996 года вводится в эксплуатацию шестая версия протокола — IPv6, которая позволяет адресовать значительно большее количество узлов, чем IPv4. Адресное пространство IPv6 составляет 2128. Такое большое адресное пространство было введено ради иерархичности адресов (это упрощает маршрутизацию).

14) Что такое октеты в DNS

Окте?т в информатике — восемь двоичных разрядов. В русском языке октет обычно называют байтом. Октет может принимать 256 возможных состояний (кодов, значений, комбинаций битов (нулей и единиц)). 

DNS (англ. Domain Name System «система доменных имён») — компьютерная распределительная система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства), получения информации о маршрутизации почты и/или обслуживающих узлах для протоколов в домене (SRV-запись).
Распределённая база данных DNS поддерживается с помощью иерархии DNS-серверов, взаимодействующих по определённому протоколу. 

15) Что такое порт, сколько портов у Linux сервера

Порт — целое неотрицательное число, записываемое в заголовках протоколов транспортного уровня сетевой модели OSI (TCP, UDP, SCTP, DCCP). 

Есть две группы портов — последовательный и параллельный. Группировка основана на том, как порт разрешает связь.
Последовательный порт может допускать передачу только одного бита за раз.
Параллельный порт может допускать одновременную передачу множества битов.
Физические порты: RS-232, PS/2, USB...
Виртуальные порты:
Существует 65 535 виртуальных портов, и все они связаны с сетевыми коммуникациями. Каждый из них может иметь различное использование, в зависимости от типа данных, проходящих через них. Эти порты используются для протокола управления передачей (TCP) или протокола дейтаграмм пользователя (UDP) или для обоих.
Порт - это целое число от 1024 до 65535. Все номера до 1024 зарезервированы и используются только определёнными службами, например, 22 - ssh, http - 80, FTP - 21 и так далее.
Количество портов ограничено с учётом 16-битной адресации (216=65536, начало — «0»). Все порты разделены на три диапазона — общеизвестные (или системные, 0—1023), зарегистрированные (или пользовательские, 1024—49151) и динамические (или частные, 49152—65535).

16) Уровни OSI

Снизу вверх:

1) физический - 
Он занимается непосредственно передачей информации. Здесь сигналы (радиосигналы, электрические, оптические) уходят от отправителя к получателю. На текущем уровне речь идёт о кабелях, радиоэфире, кодировании нулей и единиц и др.

2) канальный - 
После получения сигнала с предыдущего физического уровня, на следующем (канальном) уровне происходит проверка и исправление погрешностей передачи. Здесь появляются термины «фрейм» и «MAC-адрес». MAC адреса занимают 48 бит в шестнадцатиричном формате и могут записываться, например, таким образом: 00:26:57:00:1f:02. (LLC + MAC)

3) сетевой - 
Над канальным уровнем находится следующий – сетевой. На этой ступени вводятся понятия «маршрутизация» и «IP-адрес». Для трансформации MAC-адресов в IP применяется протокол ARP. Здесь осуществляется маршрутизация трафика.

4) транспортный - 
Здесь происходит доставка информации по каналам внешней сети. Блоки данных в данном случае делятся на отдельные фрагменты, размеры которых будут зависеть от используемого протокола. Для транспортного уровня это TCP и UDP.
TCP (Transmission Control Protocol) – протокол, хорошо подходящий для передачи трафика, для которого любые потери пакетов чувствительны. Процесс передачи контролируется, благодаря чему потерянные пакеты будут обнаружены и запрошены повторно. UDP (User Datagram Protocol) применяется, когда потеря нескольких пакетов не принципиальна. Например, при передаче видео, изображений. 

5) сеансовый -  
Сеансовый уровень в ответе за организацию сеансов связи между приложениями на компьютерах. Он отвечает за создание и окончание сеанса, обмен данными, за синхронизацию и другие процессы.
К протоколам сеансового уровня, например, относятся X.225, ISO 8327, SMPP (через него отправляются СМС сообщения), PAP. 

6) уровень представления - 
На шестой ступени осуществляется преобразование форматов данных, например, сжатие и кодирование. 

7) прикладной - 
Верхний уровень модели, где располагаются сетевые службы, с которыми напрямую взаимодействуют пользователи. Данный уровень описывает взаимосвязь приложений на ПК и внешней сети. Сюда относятся протоколы для просмотра страниц в интернете (HTTPS, HTTP), для работы с почтовыми службами (SMTP, POP3), для передачи файлов (FTP, TFTP) и другие. 

Когда осуществляется передача с верхнего на нижний, это именуется инкапсуляцией данных, а в обратном порядке – декапсуляцией. 

17) Хедеры http запросов

Заголовки HTTP (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару имя-значение. Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA. Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.

Все заголовки разделяются на четыре основных группы:

    General Headers (рус. Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
    Request Headers (рус. Заголовки запроса) — используются только в запросах клиента.
    Response Headers (рус. Заголовки ответа) — только для ответов от сервера.
    Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения.

Пример - Несколько заголовков запроса после запроса GET:

GET /home.html HTTP/1.1
Host: developer.mozilla.org
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate, br
Referer: https://developer.mozilla.org/testpage.html
Connection: keep-alive
Upgrade-Insecure-Requests: 1
If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT
If-None-Match: "c561c68d0ba92bbeb8b0fff2a9199f722e3a621a"
Cache-Control: max-age=0
